import { gray, green, italic } from 'colorette';
import { mkdir, opendir, readFile, writeFile } from 'node:fs/promises';
import { dirname, join, resolve } from 'node:path';
import { inspect } from 'node:util';

const ci = 'CI' in process.env && process.env.CI !== 'false';

const FileIcon = ci ? 'ðŸ“„' : '\uE628';
const DirectoryIcon = ci ? 'ðŸ“‚' : '\uF413';

const i1 = '\t';
const i2 = i1.repeat(2);
const i3 = i1.repeat(3);

/**
 * Recursively walk through the directory and generate the types.
 * @param path The path to walk through.
 * @param namespace The namespace to use.
 */
async function recurse(lines: string[], path: string, namespace: string, options: GenerateOptions) {
	if (options.verbose) console.log(gray(`Reading directory ${DirectoryIcon} ${green(path)}...`));

	for await (const dirent of await opendir(path)) {
		const file = join(path, dirent.name);
		if (dirent.isFile()) {
			if (!dirent.name.endsWith('.json')) continue;
			if (options.verbose) console.log(gray(`Processing ${FileIcon} ${green(file)}...`));

			const name = dirent.name.slice(0, -5);
			const key = namespace ? `'${namespace}/${name}'` : name;
			const data = JSON.stringify(JSON.parse(await readFile(file, 'utf8')), undefined, i1);
			lines.push(`${i3}${key}: ${data.replaceAll('\n', `\n${i3}`)};`);
		} else if (dirent.isDirectory()) {
			await recurse(lines, file, namespace ? `${namespace}/${dirent.name}` : dirent.name, options);
		}
	}
}

export async function generate([source, destination]: string[], options: GenerateOptions) {
	const sourceDirectory = resolve(source);
	const destinationFile = resolve(destination);

	if (options.verbose) {
		const lines = [
			`Source: ${DirectoryIcon} ${green(sourceDirectory)}...`,
			`Output: ${FileIcon} ${green(destinationFile)}...`,
			'',
			'Options:',
			`  - Verbose: ${green(options.verbose ? 'yes' : 'no')}`
		];
		console.log(italic(gray(lines.join('\n'))));
	}

	const lines = [
		'// This file is automatically generated, do not edit it.',
		"import 'i18next';",
		'',
		"declare module 'i18next' {",
		`${i1}interface CustomTypeOptions {`,
		`${i2}resources: {`
	];

	await recurse(lines, sourceDirectory, '', options);
	lines.push(`${i2}};`, `${i1}}`, '}', '');

	let generatedSource = lines.join('\n');
	if (options.prettier) {
		if (options.verbose) console.log(gray(`Loading prettier...`));

		const { resolveConfig, format } = await import('prettier');
		const config = await resolveConfig(destinationFile);
		if (options.verbose) console.log(gray(`Formatting with prettier config: ${inspect(config, { colors: true })}`));

		generatedSource = await format(generatedSource, { ...config, filepath: destinationFile });
	}

	await mkdir(dirname(destinationFile), { recursive: true });
	await writeFile(destinationFile, generatedSource, 'utf8');
}

interface GenerateOptions {
	verbose: boolean;
	prettier: boolean;
}
